{
  "version": 3,
  "sources": ["../node_modules/@civ-clone/core-rule/Criterion.ts", "../node_modules/@civ-clone/core-rule/Criteria.ts", "../node_modules/@civ-clone/core-rule/Criteria/And.ts", "../node_modules/@civ-clone/core-rule/Effect.ts", "../node_modules/@civ-clone/core-rule/Priority.ts", "../node_modules/@civ-clone/core-rule/Priorities/High.ts", "../node_modules/@civ-clone/core-rule/Priorities/Low.ts", "../node_modules/@civ-clone/core-rule/Priorities/Normal.ts", "../node_modules/@civ-clone/core-rule/Rule.ts", "../node_modules/@civ-clone/core-registry/EntityRegistry.ts", "../node_modules/@civ-clone/core-rule/RuleRegistry.ts", "../src/Rules/Weight.ts", "../src/Card.ts", "../src/Group.ts", "../src/CardRegistry.ts", "../src/playingCards.ts", "../src/Deck.ts", "../src/Player/Player.ts", "../src/Rules/ValidateMove.ts", "../src/Rules/Beats.ts", "../src/Rules/Check.ts", "../src/Player/AI.ts", "../src/Error/InvalidMove.ts", "../src/Player/Human.ts", "../src/Rules/Played.ts", "../src/Rules/TurnStart.ts", "../src/Shithead.ts", "../src/RuleSets/acesHigh.ts", "../src/RuleSets/burnTheDeck.ts", "../src/Rules/PickedUp.ts", "../src/RuleSets/core.ts", "../src/RuleSets/fourOfAKind.ts", "../src/RuleSets/giftDiscard.ts", "../src/RuleSets/seeThrough.ts", "../src/RuleSets/missAGo.ts", "../src/RuleSets/reset.ts", "../src/app.ts"],
  "sourcesContent": ["export interface ICriterion<C extends any[] = any[]> {\n  validate(...args: C): boolean;\n}\n\nexport class Criterion<C extends any[] = any[]> implements ICriterion<C> {\n  #criterion: ((...args: C) => boolean) | null = null;\n\n  constructor(criterion?: (...args: C) => boolean) {\n    if (criterion) {\n      this.#criterion = criterion;\n    }\n  }\n\n  validate(...args: C): boolean {\n    if (this.#criterion === null) {\n      return true;\n    }\n\n    return this.#criterion(...args);\n  }\n}\n\nexport default Criterion;\n", "import Criterion, { ICriterion } from './Criterion';\n\nexport interface ICriteria<C extends any[] = any[]> extends ICriterion<C> {\n  criteria(): Criterion<C>[];\n}\n\nexport class Criteria<C extends any[] = any[]>\n  extends Criterion<C>\n  implements ICriteria<C> {\n  #criteria: Criterion<C>[] = [];\n\n  constructor(...criteria: Criterion<C>[]) {\n    super();\n\n    criteria.forEach((criterion: Criterion<C>): void => {\n      this.#criteria.push(criterion);\n    });\n  }\n\n  criteria(): Criterion<C>[] {\n    return this.#criteria;\n  }\n\n  validate(...args: C): boolean {\n    return this.#criteria.every((criterion: Criterion<C>): boolean =>\n      criterion.validate(...args)\n    );\n  }\n}\n\nexport default Criteria;\n", "import Criteria from '../Criteria';\n\nexport class And<C extends any[] = any[]> extends Criteria<C> {}\n\nexport default And;\n", "export interface IEffect {\n  apply(...args: any[]): any;\n}\n\nexport class Effect<T extends any[] = any[], R = any> implements IEffect {\n  #effect: (...args: T) => R;\n\n  constructor(effect: (...args: T) => R) {\n    this.#effect = effect;\n  }\n\n  apply(...args: T): R {\n    return this.#effect(...args);\n  }\n}\n\nexport default Effect;\n", "export interface IPriority {\n  value(): number;\n}\n\nexport class Priority implements IPriority {\n  #value: number;\n\n  constructor(value: number = 2000) {\n    this.#value = value;\n  }\n\n  value(): number {\n    return this.#value;\n  }\n}\n\nexport default Priority;\n", "import Priority from '../Priority';\n\nexport class High extends Priority {\n  constructor() {\n    super(1000);\n  }\n}\n\nexport default High;\n", "import Priority from '../Priority';\n\nexport class Low extends Priority {\n  constructor() {\n    super(3000);\n  }\n}\n\nexport default Low;\n", "import Priority from '../Priority';\n\nexport class Normal extends Priority {\n  constructor() {\n    super(2000);\n  }\n}\n\nexport default Normal;\n", "import And from './Criteria/And';\nimport Criteria from './Criteria';\nimport Criterion from './Criterion';\nimport Effect from './Effect';\nimport { Normal } from './Priorities';\nimport Priority from './Priority';\n\nexport interface IRule<C extends any[] = any[], R = any> {\n  priority(): Priority;\n  process(...args: C): R | void;\n  validate(...args: C): boolean;\n}\n\nexport class Rule<C extends any[] = any[], R = any> implements IRule<C, R> {\n  #criteria: Criteria<C> | undefined;\n  #effect: Effect<C, R> | undefined;\n  #priority: Priority = new Normal();\n\n  constructor(...values: (Priority | Criterion<C> | Effect<C, R>)[]) {\n    const criteria: Criterion<C>[] = [];\n\n    values.forEach((value: Priority | Criterion<C> | Effect<C, R>): void => {\n      if (value instanceof Effect) {\n        if (this.#effect) {\n          throw new TypeError(\n            'Rule: effect already specified, but another was provided.'\n          );\n        }\n\n        this.#effect = value;\n\n        return;\n      }\n\n      if (value instanceof Criterion) {\n        criteria.push(value);\n\n        return;\n      }\n\n      this.#priority = value;\n    });\n\n    if (criteria.length) {\n      this.#criteria = new And(...criteria);\n    }\n  }\n\n  priority(): Priority {\n    return this.#priority;\n  }\n\n  process(...args: C): R | void {\n    if (this.#effect instanceof Effect) {\n      return this.#effect.apply(...args);\n    }\n  }\n\n  validate(...args: C): boolean {\n    if (this.#criteria instanceof Criterion) {\n      return this.#criteria.validate(...args);\n    }\n\n    return true;\n  }\n}\n\nexport default Rule;\n", "import { IRegistry, IRegistryFilter, IConstructor } from './Registry';\n\nexport interface IEntityRegistry<T> extends IRegistry<T> {\n  accepts(entity: T): boolean;\n  entries(): T[];\n  every(iterator: IRegistryFilter<T>): boolean;\n  filter(iterator: IRegistryFilter<T>): T[];\n  forEach(iterator: (item: T, i: number) => void): void;\n  getBy<K extends keyof T>(key: K, value: any): T[];\n  includes(item: T): boolean;\n  indexOf(item: T): number;\n  map(iterator: (item: T, i: number) => any): any[];\n  register(...entities: T[]): void;\n  some(iterator: IRegistryFilter<T>): boolean;\n  unregister(...entities: T[]): void;\n}\n\nexport class EntityRegistry<T = any> implements IEntityRegistry<T> {\n  #acceptedTypes: IConstructor<T>[] = [];\n  #entries: T[] = [];\n\n  constructor(...acceptedTypes: IConstructor<T>[]) {\n    this.#acceptedTypes.push(...acceptedTypes);\n  }\n\n  accepts(entity: T): boolean {\n    return this.#acceptedTypes.some(\n      (acceptedType: IConstructor<T>): boolean => entity instanceof acceptedType\n    );\n  }\n\n  entries(): T[] {\n    return this.#entries.slice();\n  }\n\n  every(iterator: IRegistryFilter<T>): boolean {\n    return this.entries().every(iterator);\n  }\n\n  filter(iterator: IRegistryFilter<T>): T[] {\n    return this.entries().filter(iterator);\n  }\n\n  forEach(iterator: (item: T, i: number) => void): void {\n    return this.entries().forEach(iterator);\n  }\n\n  getBy<K extends keyof T>(key: K, value: any): T[] {\n    return this.filter((entity: T): boolean => {\n      const check = entity[key];\n\n      if (check instanceof Function) {\n        return check.bind(entity)() === value;\n      }\n\n      return entity[key] === value;\n    });\n  }\n\n  includes(item: T): boolean {\n    return this.#entries.includes(item);\n  }\n\n  indexOf(entity: T): number {\n    return this.#entries.indexOf(entity);\n  }\n\n  get length(): number {\n    return this.entries().length;\n  }\n\n  map(iterator: (item: T, i: number) => any): any[] {\n    return this.entries().map(iterator);\n  }\n\n  register(...entities: T[]): void {\n    entities.forEach((entity: T): void => {\n      if (!this.accepts(entity)) {\n        throw new TypeError(\n          `Registry#register: Invalid entity attempted to be registered: '${entity}'.`\n        );\n      }\n\n      if (!this.#entries.includes(entity)) {\n        this.#entries.push(entity);\n      }\n    });\n  }\n\n  some(iterator: IRegistryFilter<T>): boolean {\n    return this.entries().some(iterator);\n  }\n\n  unregister(...entities: T[]): void {\n    entities.forEach((entity: T) => {\n      const index = this.#entries.indexOf(entity);\n\n      if (index > -1) {\n        this.#entries.splice(index, 1);\n      }\n    });\n  }\n}\n\nexport default EntityRegistry;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Rule from './Rule';\n\nexport interface IRuleRegistry<\n  T extends Rule = Rule,\n  P extends any[] = any[],\n  R = any\n> extends IEntityRegistry<T> {\n  get(RuleType: IConstructor<T>): T[];\n  process(RuleType: IConstructor<T>, ...args: P): R[];\n}\n\nexport class RuleRegistry<\n    T extends Rule = Rule,\n    P extends any[] = any[],\n    R = any\n  >\n  extends EntityRegistry\n  implements IRuleRegistry<T> {\n  #cache: Map<IConstructor<T>, T[]> = new Map();\n\n  #invalidateCache = (rule: T): void => {\n    this.#cache.delete(<IConstructor<T>>rule.constructor);\n  };\n\n  constructor() {\n    super(Rule);\n  }\n\n  entries(): T[] {\n    return super\n      .entries()\n      .sort(\n        (a: T, b: T): number => a.priority().value() - b.priority().value()\n      );\n  }\n\n  get(RuleType: IConstructor<T>): T[] {\n    if (!this.#cache.has(RuleType)) {\n      this.#cache.set(\n        RuleType,\n        this.filter((rule: T): boolean => rule instanceof RuleType)\n      );\n    }\n\n    return this.#cache.get(RuleType) || [];\n  }\n\n  process(RuleType: IConstructor<T>, ...args: P): R[] {\n    return this.get(RuleType)\n        .map((rule: T): [boolean, R] => rule.validate(...args) ? [true, rule.process(...args)] : [false])\n        .filter(([valid, value]) => valid)\n        .map(([, value]) => value);\n  }\n\n  register(...rules: T[]) {\n    super.register(...rules);\n\n    rules.forEach((rule: T): void => this.#invalidateCache(rule));\n  }\n\n  unregister(...rules: T[]): void {\n    super.unregister(...rules);\n\n    rules.forEach((rule: T): void => this.#invalidateCache(rule));\n  }\n}\n\nexport const instance: RuleRegistry = new RuleRegistry();\n\nexport default RuleRegistry;\n", "import Card from '../Card';\nimport Deck from '../Deck';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport { noCard } from '../playingCards';\nimport Beats from './Beats';\n\nexport class Weight extends Rule<[Card], number> {}\n\nexport const weight = (card: Card): number =>\n  ruleRegistryInstance.process(Weight, card).shift();\n\nexport default Weight;\n", "import Group from './Group';\n\nexport type CardDetails = {\n  id: string;\n  name?: null | string;\n  value: number;\n  group?: null | Group;\n  title?: null | string;\n};\n\nexport interface ICard {\n  getId(): string;\n  getName(): null | string;\n  getValue(): number;\n  getGroup(): null | Group;\n  getTitle(): null | string;\n  toString(): string;\n}\n\nexport class Card implements ICard {\n  private id: string;\n  private name: null | string;\n  private value: number;\n  private group: null | Group;\n  private title: null | string;\n\n  constructor({\n    id,\n    name = null,\n    value,\n    group = null,\n    title = null,\n  }: CardDetails) {\n    this.id = id;\n    this.name = name;\n    this.value = value;\n    this.group = group;\n    this.title = title;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getName(): null | string {\n    return this.name;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  getGroup(): null | Group {\n    return this.group;\n  }\n\n  getTitle(): null | string {\n    return this.title;\n  }\n\n  toString(): string {\n    if (this.title !== null) {\n      return this.title;\n    }\n\n    if (this.group !== null) {\n      return `${this.title || this.name || this.value} of ${\n        this.group.getTitle() || this.group.getName()\n      }`;\n    }\n\n    return this.title || this.name || this.id;\n  }\n}\n\nexport default Card;\n", "export interface IGroup {\n  getName(): string;\n}\n\nexport type GroupDetails = {\n  name: string;\n  title?: null | string;\n};\n\nexport class Group implements IGroup {\n  private name: string;\n  private title: null | string;\n\n  constructor({ name, title = null }: GroupDetails) {\n    this.name = name;\n    this.title = title;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getTitle(): null | string {\n    return this.title;\n  }\n}\n\nexport default Group;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Card from './Card';\n\nexport interface ICardRegistry<\n  T extends Card = Card,\n  P extends any[] = any[],\n  R = any\n> extends IEntityRegistry<T> {\n  getById(id: string): null | T;\n}\n\nexport class CardRegistry<\n    T extends Card = Card,\n    P extends any[] = any[],\n    R = any\n  >\n  extends EntityRegistry\n  implements ICardRegistry<T>\n{\n  constructor() {\n    super(Card);\n  }\n\n  getById(id: string): null | T {\n    const [card] = this.getBy('id', id);\n\n    return card ?? null;\n  }\n}\n\nexport const instance: CardRegistry = new CardRegistry();\n\nexport default CardRegistry;\n", "import { Card, CardDetails } from './Card';\nimport Group from './Group';\nimport { instance as cardRegistryInstance } from './CardRegistry';\n\nexport const Clubs = new Group({ name: 'clubs', title: 'Clubs' }),\n  Hearts = new Group({ name: 'hearts', title: 'Hearts' }),\n  Diamonds = new Group({ name: 'diamonds', title: 'Diamonds' }),\n  Spades = new Group({ name: 'spades', title: 'Spades' });\n\nexport const noCard = new Card({ id: '', title: 'The Table', value: 0 });\n\n[\n  { id: 'AC', name: 'Ace', value: 1, group: Clubs },\n  { id: '2C', name: 'Two', value: 2, group: Clubs },\n  { id: '3C', name: 'Three', value: 3, group: Clubs },\n  { id: '4C', name: 'Four', value: 4, group: Clubs },\n  { id: '5C', name: 'Five', value: 5, group: Clubs },\n  { id: '6C', name: 'Six', value: 6, group: Clubs },\n  { id: '7C', name: 'Seven', value: 7, group: Clubs },\n  { id: '8C', name: 'Eight', value: 8, group: Clubs },\n  { id: '9C', name: 'Nine', value: 9, group: Clubs },\n  { id: 'TC', name: 'Ten', value: 10, group: Clubs },\n  { id: 'JC', name: 'Jack', value: 11, group: Clubs },\n  { id: 'QC', name: 'Queen', value: 12, group: Clubs },\n  { id: 'KC', name: 'King', value: 13, group: Clubs },\n\n  { id: 'AH', name: 'Ace', value: 1, group: Hearts },\n  { id: '2H', name: 'Two', value: 2, group: Hearts },\n  { id: '3H', name: 'Three', value: 3, group: Hearts },\n  { id: '4H', name: 'Four', value: 4, group: Hearts },\n  { id: '5H', name: 'Five', value: 5, group: Hearts },\n  { id: '6H', name: 'Six', value: 6, group: Hearts },\n  { id: '7H', name: 'Seven', value: 7, group: Hearts },\n  { id: '8H', name: 'Eight', value: 8, group: Hearts },\n  { id: '9H', name: 'Nine', value: 9, group: Hearts },\n  { id: 'TH', name: 'Ten', value: 10, group: Hearts },\n  { id: 'JH', name: 'Jack', value: 11, group: Hearts },\n  { id: 'QH', name: 'Queen', value: 12, group: Hearts },\n  { id: 'KH', name: 'King', value: 13, group: Hearts },\n\n  { id: 'AD', name: 'Ace', value: 1, group: Diamonds },\n  { id: '2D', name: 'Two', value: 2, group: Diamonds },\n  { id: '3D', name: 'Three', value: 3, group: Diamonds },\n  { id: '4D', name: 'Four', value: 4, group: Diamonds },\n  { id: '5D', name: 'Five', value: 5, group: Diamonds },\n  { id: '6D', name: 'Six', value: 6, group: Diamonds },\n  { id: '7D', name: 'Seven', value: 7, group: Diamonds },\n  { id: '8D', name: 'Eight', value: 8, group: Diamonds },\n  { id: '9D', name: 'Nine', value: 9, group: Diamonds },\n  { id: 'TD', name: 'Ten', value: 10, group: Diamonds },\n  { id: 'JD', name: 'Jack', value: 11, group: Diamonds },\n  { id: 'QD', name: 'Queen', value: 12, group: Diamonds },\n  { id: 'KD', name: 'King', value: 13, group: Diamonds },\n\n  { id: 'AS', name: 'Ace', value: 1, group: Spades },\n  { id: '2S', name: 'Two', value: 2, group: Spades },\n  { id: '3S', name: 'Three', value: 3, group: Spades },\n  { id: '4S', name: 'Four', value: 4, group: Spades },\n  { id: '5S', name: 'Five', value: 5, group: Spades },\n  { id: '6S', name: 'Six', value: 6, group: Spades },\n  { id: '7S', name: 'Seven', value: 7, group: Spades },\n  { id: '8S', name: 'Eight', value: 8, group: Spades },\n  { id: '9S', name: 'Nine', value: 9, group: Spades },\n  { id: 'TS', name: 'Ten', value: 10, group: Spades },\n  { id: 'JS', name: 'Jack', value: 11, group: Spades },\n  { id: 'QS', name: 'Queen', value: 12, group: Spades },\n  { id: 'KS', name: 'King', value: 13, group: Spades },\n\n  // { id: 'R', name: 'Rules Card', title: 'Rules Card', value: 0 },\n  { id: '*1', name: 'Joker', title: 'Joker', value: 0 },\n  { id: '*2', name: 'Joker', title: 'Joker', value: 0 },\n].forEach((details: CardDetails) =>\n  cardRegistryInstance.register(new Card(details))\n);\n", "import Card from './Card';\nimport { noCard } from './playingCards';\n\nexport interface IDeck {\n  after(card: Card): Card;\n  before(card: Card): Card;\n  bottom(): Card;\n  canAdd(deck: Card | Card[] | Deck): boolean;\n  deal(cards: number, hands: number): Deck[];\n  empty(): Deck;\n  has(needle: Card): boolean;\n  includes(deck: Card | Card[] | Deck): Deck;\n  get length(): number;\n  peek(n: null | number): Card[];\n  pop(cards: number): Deck;\n  push(cards: Card | Card[] | Deck): Deck;\n  remove(card: Card): Card;\n  shift(cards: number): Deck;\n  shuffle(): Deck;\n  sort(sortFunction: (a: Card, b: Card) => number): Deck;\n  top(): Card;\n  toString(): string;\n  unshift(cards: Card | Card[] | Deck): Deck;\n  valueOf(): Card[];\n}\n\nexport const extractCards = (...stacks: (Card | Card[] | Deck)[]): Card[] => {\n  return stacks.reduce((cards: Card[], hand: Card | Card[] | Deck): Card[] => {\n    if (hand instanceof Card) {\n      cards.push(hand);\n\n      return cards;\n    }\n\n    if (hand instanceof Deck) {\n      cards.push(...hand.peek());\n\n      return cards;\n    }\n\n    cards.push(...hand);\n\n    return cards;\n  }, []);\n};\n\nexport class Deck implements IDeck {\n  private cards: Card[] = [];\n\n  constructor(...hands: (Card | Card[] | Deck)[]) {\n    this.cards.push(...extractCards(...hands));\n  }\n\n  after(card: Card): Card {\n    return this.cards[this.cards.indexOf(card) + 1] ?? noCard;\n  }\n\n  before(card: Card): Card {\n    return this.cards[this.cards.indexOf(card) - 1] ?? noCard;\n  }\n\n  bottom(): Card {\n    return this.cards[0];\n  }\n\n  canAdd(deck: Card | Card[] | Deck): boolean {\n    if (deck instanceof Card || deck instanceof Array) {\n      deck = new Deck(deck);\n    }\n\n    return this.includes(deck).length === 0;\n  }\n\n  deal(cards: number, hands: number): Deck[] {\n    const total = cards * hands,\n      decks: Deck[] = [];\n\n    if (this.cards.length < total) {\n      throw new RangeError('Not enough cards in deck.');\n    }\n\n    for (let i = 0; i < total; i++) {\n      if (!decks[i % hands]) {\n        decks[i % hands] = new Deck();\n      }\n\n      decks[i % hands].push(this.pop());\n    }\n\n    return decks.map((deck) => new Deck(deck));\n  }\n\n  empty(): Deck {\n    return new Deck(this.cards.splice(0));\n  }\n\n  has(needle: Card): boolean {\n    return this.cards.some((card) => card.getId() === needle.getId());\n  }\n\n  includes(deck: Card | Card[] | Deck): Deck {\n    if (deck instanceof Card || deck instanceof Array) {\n      deck = new Deck(deck);\n    }\n\n    return new Deck(deck.cards.filter((card: Card) => this.has(card)));\n  }\n\n  get length(): number {\n    return this.cards.length;\n  }\n\n  peek(n: null | number = null): Card[] {\n    return n === null ? this.cards : this.cards.slice(-n);\n  }\n\n  pop(cards: number = 1): Deck {\n    if (this.cards.length < cards) {\n      throw new RangeError('Not enough cards in deck.');\n    }\n\n    return new Deck(this.cards.splice(-cards));\n  }\n\n  push(cards: Card | Card[] | Deck): Deck {\n    cards = extractCards(cards);\n\n    if (!this.canAdd(cards)) {\n      throw new RangeError(\n        'Operation would result in duplicate cards in deck, which is disallowed by the current options.'\n      );\n    }\n\n    this.cards.push(...cards);\n\n    return this;\n  }\n\n  remove(card: Card): Card {\n    if (!this.has(card)) {\n      throw new RangeError(`Card ${card.getId()} is not in the Deck.`);\n    }\n\n    this.cards.splice(this.cards.indexOf(card), 1);\n\n    return card;\n  }\n\n  shift(cards: number = 1): Deck {\n    return new Deck(this.cards.splice(0, cards));\n  }\n\n  shuffle(): Deck {\n    var shuffled = [];\n\n    while (this.cards.length) {\n      shuffled.push(\n        ...this.cards.splice(Math.floor(this.cards.length * Math.random()), 1)\n      );\n    }\n\n    this.cards.push(...shuffled);\n\n    return this;\n  }\n\n  sort(sortFunction: (a: Card, b: Card) => number): Deck {\n    this.cards.sort(sortFunction);\n\n    return this;\n  }\n\n  top(): Card {\n    return this.cards[this.length - 1];\n  }\n\n  toString(): string {\n    return this.cards.map((card) => card.toString()).join(',');\n  }\n\n  unshift(cards: Card | Card[] | Deck): Deck {\n    if (cards instanceof Card || cards instanceof Array) {\n      cards = new Deck(cards);\n    }\n\n    if (!this.canAdd(cards)) {\n      throw new RangeError(\n        'Operation would result in duplicate cards in deck, which is disallowed by the current options.'\n      );\n    }\n\n    this.cards.unshift(...cards.empty().peek());\n\n    return this;\n  }\n\n  valueOf(): Card[] {\n    return this.cards;\n  }\n}\n\nexport default Deck;\n", "import Deck from '../Deck';\nimport Shithead from '../Shithead';\n\nexport interface IPlayer {\n  getId(): number;\n  getName(): string;\n  play(game: Shithead): Promise<Deck>;\n  swapDeck(): Promise<void>;\n  toString(): string;\n}\n\nexport type PlayerArgs = {\n  id: number;\n  name?: null | string;\n};\n\nexport class Player implements IPlayer {\n  protected id: number;\n  protected name: string;\n  public faceDown: Deck;\n  public faceUp: Deck;\n  public hand: Deck;\n  protected ready: boolean = false;\n\n  constructor({ id, name = null }: PlayerArgs) {\n    this.id = id;\n    this.name = name ?? `Player ${id}`;\n    this.faceDown = new Deck();\n    this.faceUp = new Deck();\n    this.hand = new Deck();\n  }\n\n  getId(): number {\n    return this.id;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  play(game: Shithead): Promise<Deck> {\n    throw new Error(`'play' must be implemented.`);\n  }\n\n  swapDeck(): Promise<void> {\n    throw new Error(`'swapDeck' must be implemented.`);\n  }\n\n  toString(): string {\n    return (\n      this.name +\n      ' - Face down cards: [' +\n      this.faceDown +\n      '], Face up cards: [' +\n      this.faceUp +\n      '], Hand: [' +\n      this.hand +\n      ']'\n    );\n  }\n}\n\nexport default Player;\n", "import Deck from '../Deck';\nimport Player from '../Player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Shithead from '../Shithead';\n\nexport class ValidateMove extends Rule<[Deck, Player, Shithead]> {}\n\nexport default ValidateMove;\n", "import Card from '../Card';\nimport Deck from '../Deck';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\n\nexport class Beats extends Rule<[Card, Deck], boolean> {}\n\nexport const beats = (card: Card, pile: Deck): boolean =>\n  ruleRegistryInstance.process(Beats, card, pile).some((beats) => beats);\n\nexport default Beats;\n", "import Card from '../Card';\nimport Deck from '../Deck';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport { noCard } from '../playingCards';\nimport Beats from './Beats';\n\nexport class Check extends Rule<[Card, Deck], number> {}\n\nexport const value = (card: Card, pile: Deck): number =>\n  ruleRegistryInstance.process(Check, card, pile).shift();\n\nexport default Check;\n", "import { Weight, weight } from '../Rules/Weight';\nimport Card from '../Card';\nimport Deck from '../Deck';\nimport Player from './Player';\nimport Shithead from '../Shithead';\nimport ValidateMove from '../Rules/ValidateMove';\nimport { beats } from '../Rules/Beats';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport { value } from '../Rules/Check';\n\nexport class AI extends Player {\n  swapDeck(): Promise<void> {\n    return new Promise((resolve) => {\n      const swapDeck = new Deck(this.faceUp.empty(), this.hand.empty());\n\n      swapDeck.sort((a, b) => {\n        const [weightA, weightB] = [a, b].map((card) =>\n          ruleRegistryInstance.process(Weight, a).shift()\n        );\n\n        return weightA - weightB;\n      });\n\n      this.faceUp.push(swapDeck.pop(3));\n      this.hand = swapDeck.empty();\n\n      resolve();\n    });\n  }\n\n  play(game: Shithead): Promise<Deck> {\n    const discardPile = game.discard;\n\n    return new Promise((resolve) => {\n      const playing = new Deck();\n\n      if (this.hand.length === 0 && this.faceUp.length) {\n        const [chosen] = this.faceUp\n          .peek()\n          .map((card): [Card, number] => [card, weight(card)])\n          .filter(([card]) => beats(card, discardPile))\n          .sort(([, valueA], [, valueB]) => valueA - valueB)\n          .map(([card]) => card)\n          // Add the bottom card in case there isn't a \"winning\" card.\n          .concat(this.faceUp.peek());\n\n        this.hand.push(this.faceUp.remove(chosen));\n      } else if (this.hand.length === 0 && this.faceDown.length) {\n        this.hand.push(this.faceDown.pop());\n      }\n\n      const [primary, ...otherCandidates] = this.hand\n        .sort((a, b) => {\n          const [valueA, valueB] = [a, b].map((card) =>\n            value(card, discardPile)\n          );\n\n          return valueA - valueB;\n        })\n        .peek()\n        .filter((card) => beats(card, discardPile));\n\n      if (primary) {\n        playing.push(this.hand.remove(primary));\n      } else {\n        playing.push(this.hand.pop());\n      }\n\n      otherCandidates.forEach((card) => {\n        const cardValue = value(card, discardPile);\n\n        if (cardValue > 12) {\n          return;\n        }\n\n        const valid = ruleRegistryInstance\n          .process(ValidateMove, new Deck(...playing.peek(), card), this, game)\n          .every((valid) => valid);\n\n        if (valid) {\n          playing.push(this.hand.remove(card));\n        }\n      });\n\n      resolve(playing);\n    });\n  }\n}\n\nexport default AI;\n", "import Deck from '../Deck';\nimport Player from '../Player/Player';\n\nexport class InvalidMove extends Error {\n  constructor(player: Player, played: Deck) {\n    super(`Invalid move: ${player} - ${played.toString()} cannot be played.`);\n  }\n}\n\nexport default InvalidMove;\n", "import Deck from '../Deck';\nimport InvalidMove from '../Error/InvalidMove';\nimport Player from './Player';\nimport Shithead from '../Shithead';\nimport ValidateMove from '../Rules/ValidateMove';\nimport Weight from '../Rules/Weight';\nimport { instance as cardRegistryInstance } from '../CardRegistry';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport { noCard } from '../playingCards';\n\nexport class Human extends Player {\n  swapDeck(): Promise<void> {\n    return new Promise((resolve) => {\n      const swapDeck = new Deck(this.faceUp.empty(), this.hand.empty());\n\n      swapDeck.sort((a, b) => {\n        const [weightA, weightB] = [a, b].map((card) =>\n          ruleRegistryInstance.process(Weight, card).shift()\n        );\n\n        return weightA - weightB;\n      });\n\n      this.faceUp.push(swapDeck.pop(3));\n      this.hand = swapDeck.empty();\n\n      resolve();\n    });\n  }\n\n  play(game: Shithead): Promise<Deck> {\n    return new Promise((resolve, reject) => {\n      const clickHandler = (event: Event) => {\n          if (\n            (event instanceof MouseEvent && event.button === 2) ||\n            (event instanceof TouchEvent && event.touches.length > 1)\n          ) {\n            if (event instanceof MouseEvent) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n\n            commitMove();\n\n            return;\n          }\n\n          const el = event.target;\n\n          if (\n            !(el instanceof Element) ||\n            !el.matches('.player .card') ||\n            (this.hand.length && !el.matches('.player .hand .card'))\n          ) {\n            return;\n          }\n\n          el.classList.toggle('chosen');\n        },\n        contextMenuHandler = (event: MouseEvent) => {\n          event.stopPropagation();\n          event.preventDefault();\n        },\n        removeEvents = () => {\n          ['touchstart', 'mousedown'].forEach((eventName) =>\n            document.removeEventListener(eventName, clickHandler)\n          );\n\n          document.body.removeEventListener('contextmenu', contextMenuHandler);\n        },\n        commitMove = () => {\n          const playing = new Deck(),\n            targets = (\n              Array.from(\n                document.querySelectorAll(\n                  this.hand.length\n                    ? `[data-player-id=\"${this.id}\"] .hand .card.chosen`\n                    : this.faceUp.length\n                    ? `[data-player-id=\"${this.id}\"] .card.chosen:not(.face-down)`\n                    : `[data-player-id=\"${this.id}\"] .card.chosen`\n                )\n              ) as HTMLElement[]\n            ).map(\n              (cardElement) =>\n                cardRegistryInstance.getById(\n                  // TODO: this doesn't work for the faceDown cards as they don't have an ID set!\n                  cardElement.dataset.cardId ?? ''\n                ) || noCard\n            );\n\n          playing.push(targets);\n\n          removeEvents();\n\n          if (\n            !(\n              targets.every((card) => this.hand.has(card)) ||\n              targets.every((card) => this.faceUp.has(card)) ||\n              targets.every((card) => this.faceDown.has(card))\n            ) ||\n            playing.length === 0 ||\n            !ruleRegistryInstance\n              .process(ValidateMove, playing, this, game)\n              .every((value) => value)\n          ) {\n            reject(new InvalidMove(this, playing));\n\n            return;\n          }\n\n          playing.peek().forEach((card) => {\n            if (this.hand.has(card)) {\n              this.hand.remove(card);\n\n              return;\n            }\n\n            if (this.faceUp.has(card)) {\n              this.faceUp.remove(card);\n\n              return;\n            }\n\n            this.faceDown.remove(card);\n          });\n\n          resolve(playing);\n        };\n\n      document.body.addEventListener('contextmenu', contextMenuHandler);\n\n      ['touchstart', 'mousedown'].forEach((eventName) => {\n        removeEvents();\n\n        document.addEventListener(eventName, clickHandler);\n      });\n    });\n  }\n}\n\nexport default Human;\n", "import Deck from '../Deck';\nimport Player from '../Player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Shithead from '../Shithead';\n\nexport class Played extends Rule<[Deck, Player, Shithead]> {}\n\nexport default Played;\n", "import Player from '../Player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Shithead from '../Shithead';\n\nexport class TurnStart extends Rule<[Player, Shithead, number]> {}\n\nexport default TurnStart;\n", "import Deck from './Deck';\nimport InvalidMove from './Error/InvalidMove';\nimport Played from './Rules/Played';\nimport Player from './Player/Player';\nimport ValidateMove from './Rules/ValidateMove';\nimport { instance as cardRegistryInstance } from './CardRegistry';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport TurnStart from './Rules/TurnStart';\n\nexport interface IShithead {\n  advanceTurn(): number;\n  play(): Promise<Player>;\n  setWinner(player: Player): void;\n  start(): void;\n}\n\nexport type ShitheadArgs = {\n  players: Player[];\n};\n\nexport class Shithead implements IShithead {\n  public burnt: Deck = new Deck();\n  public deck: Deck;\n  public discard: Deck = new Deck();\n  public players: Player[] = [];\n  private turn: number = 0;\n  public winner: null | Player = null;\n\n  constructor(args: ShitheadArgs) {\n    this.deck = new Deck(...cardRegistryInstance.entries());\n\n    this.deck.shuffle();\n\n    this.players.push(...args.players);\n  }\n\n  advanceTurn(n = 1): number {\n    return (this.turn += n);\n  }\n\n  play(): Promise<Player> {\n    return new Promise(async (resolve, reject) => {\n      while (!this.winner) {\n        const currentPlayer = this.players[this.turn % this.players.length];\n\n        ruleRegistryInstance.process(TurnStart, currentPlayer, this, this.turn);\n\n        let played;\n\n        try {\n          played = await currentPlayer.play(this);\n\n          if (\n            !ruleRegistryInstance\n              .process(ValidateMove, played, currentPlayer, this)\n              .every((value) => value)\n          ) {\n            throw new InvalidMove(currentPlayer, played);\n          }\n        } catch (e) {\n          console.error(e);\n\n          continue;\n        }\n\n        ruleRegistryInstance.process(Played, played, currentPlayer, this);\n      }\n\n      resolve(this.winner);\n    });\n  }\n\n  setWinner(player: Player): void {\n    this.winner = player;\n  }\n\n  start(): void {\n    this.players.forEach((player) => {\n      const [hand, faceDown, faceUp] = this.deck.deal(3, 3);\n\n      player.hand.push(hand);\n      player.faceDown.push(faceDown);\n      player.faceUp.push(faceUp);\n    });\n\n    this.players.forEach(async (player) => await player.swapDeck());\n  }\n}\n\nexport default Shithead;\n", "import Card from '../Card';\nimport Check from '../Rules/Check';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Weight from '../Rules/Weight';\n\nconst isAce = new Criterion((card: Card) =>\n  ['AC', 'AD', 'AH', 'AS'].includes(card.getId())\n);\n\nexport const getRules = (value: number = 14, weight: number = 30) => [\n  new Check(isAce, new Effect(() => value)),\n\n  new Weight(isAce, new Effect(() => weight)),\n];\n\nexport default getRules;\n", "import Card from '../Card';\nimport Check from '../Rules/Check';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Played from '../Rules/Played';\nimport Shithead from '../Shithead';\nimport Weight from '../Rules/Weight';\n\nexport const getRules = (\n  cards: string[] = ['TC', 'TD', 'TH', 'TS'],\n  value: number = 15,\n  weight: number = 50\n) => [\n  new Check(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => value)\n  ),\n\n  new Played(\n    new Criterion((played: Deck) =>\n      played.peek().some((card) => cards.includes(card.getId()))\n    ),\n    new Effect((played, player, game: Shithead) =>\n      game.burnt.push(game.discard.empty())\n    )\n  ),\n\n  new Weight(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => weight)\n  ),\n];\n\nexport default getRules;\n", "import Deck from '../Deck';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Shithead from '../Shithead';\n\nexport class PickedUp extends Rule<[Deck, Shithead]> {}\n\nexport default PickedUp;\n", "import { Beats, beats } from '../Rules/Beats';\nimport { Check, value } from '../Rules/Check';\nimport Card from '../Card';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport High from '@civ-clone/core-rule/Priorities/High';\nimport Low from '@civ-clone/core-rule/Priorities/Low';\nimport PickedUp from '../Rules/PickedUp';\nimport Played from '../Rules/Played';\nimport Player from '../Player/Player';\nimport Shithead from '../Shithead';\nimport ValidateMove from '../Rules/ValidateMove';\nimport Weight from '../Rules/Weight';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport { noCard } from '../playingCards';\nimport And from '@civ-clone/core-rule/Criteria/And';\n\nexport const getRules = () => [\n  new Beats(\n    new Effect((played, pile) => {\n      const [toBeatValue, playedValue] = [pile.top() || noCard, played].map(\n        (card) => value(card, pile)\n      );\n\n      return playedValue >= toBeatValue;\n    })\n  ),\n\n  new Check(new Low(), new Effect((card: Card) => card.getValue())),\n\n  new Played(\n    new High(),\n    new Criterion((played: Deck, player: Player, game: Shithead) =>\n      played.peek().every((card) => beats(card, game.discard))\n    ),\n    new Effect((played: Deck, player: Player, game: Shithead) =>\n      game.discard.push(played.peek())\n    )\n  ),\n  new Played(\n    new High(),\n    new Criterion(\n      (played: Deck, player: Player, game: Shithead) =>\n        played.top() !== game.discard.top()\n    ),\n    new Criterion(\n      (played: Deck, player: Player, game: Shithead) =>\n        !played.peek().every((card) => beats(card, game.discard))\n    ),\n    new Effect((played: Deck, player: Player, game: Shithead) => {\n      const pickingUp = game.discard.empty();\n\n      ruleRegistryInstance.process(PickedUp, pickingUp, game);\n\n      player.hand.push(pickingUp);\n    })\n  ),\n  new Played(\n    new High(),\n    new And(\n      new Criterion(\n        (played: Deck, player: Player, game: Shithead) => player.hand.length < 3\n      ),\n      new Criterion(\n        (played: Deck, player: Player, game: Shithead) => game.deck.length > 0\n      )\n    ),\n    new Effect((played, player, game: Shithead) =>\n      player.hand.push(\n        game.deck.pop(Math.min(3 - player.hand.length, game.deck.length))\n      )\n    )\n  ),\n  new Played(\n    new Criterion(\n      (played: Deck, player: Player, game: Shithead) =>\n        player.hand.length === 0 &&\n        player.faceUp.length === 0 &&\n        player.faceDown.length === 0\n    ),\n    new Effect((played: Deck, player: Player, game: Shithead) =>\n      game.setWinner(player)\n    )\n  ),\n  new Played(\n    new Effect((played: Deck, player: Player, game: Shithead) =>\n      game.advanceTurn()\n    )\n  ),\n\n  new Weight(new Low(), new Effect((card: Card) => card.getValue())),\n\n  // new ValidateMove(\n  //   new Effect((played: Deck, player: Player) =>\n  //     (player.hand.length > 0 && played.peek().every((card) => player.hand.has(card))) ||\n  //     (player.hand.length === 0 && player.faceUp.length > 0 && played.peek().every((card) => player.faceUp.has(card))) ||\n  //     (player.hand.length === 0 && player.faceUp.length === 0 && played.peek().every((card) => player.faceDown.has(card)))\n  //   )\n  // ),\n  new ValidateMove(\n    new Effect((played: Deck) =>\n      played\n        .peek()\n        .every(\n          (card) => card.getId()[0] === (played.top() || noCard).getId()[0]\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Played from '../Rules/Played';\nimport Player from '../Player/Player';\nimport Shithead from '../Shithead';\nimport { noCard } from '../playingCards';\nimport And from '@civ-clone/core-rule/Criteria/And';\n\nexport const getRules = () => [\n  new Played(\n    new And(\n      new Criterion((played: Deck, player: Player, game: Shithead) =>\n        game.discard\n          .peek(4)\n          .every(\n            (card) =>\n              card.getId()[0] === (game.discard.top() || noCard).getId()[0]\n          )\n      ),\n      new Criterion(\n        (played: Deck, player: Player, game: Shithead) =>\n          game.discard.length >= 4\n      )\n    ),\n    new Effect((played: Deck, player: Player, game: Shithead) =>\n      game.burnt.push(game.discard.empty())\n    )\n  ),\n];\n\nexport default getRules;\n", "import Card from '../Card';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PickedUp from '../Rules/PickedUp';\nimport Shithead from '../Shithead';\nimport ValidateMove from '../Rules/ValidateMove';\nimport Check from '../Rules/Check';\nimport { noCard } from '../playingCards';\nimport Weight from '../Rules/Weight';\n\n// TODO\n// {\n//   cards: ['*1', '*2'],\n//   name: 'Give them to someone',\n//   value: 20,\n//   played: function (game, player, card, played) {\n//     game.burnt.push(game.discard.remove(card));\n//   },\n//   check: function (game, player, card, played) {\n//     return ['*1', '*2', 'TC', 'TD', 'TH', 'TS'].includes(played.id);\n//   },\n//   action: function (game, player, card, played) {\n//     var targetPlayer;\n//\n//     if (player.type == 'Human') {\n//       if (game.players.length == 2) {\n//         targetPlayer = targetPlayer = game.players.filter(function (\n//           otherPlayer\n//         ) {\n//           return otherPlayer.id != player.id;\n//         })[0];\n//       }\n//\n//       while (typeof targetPlayer === 'undefined') {\n//         targetPlayer =\n//           game.players[\n//             prompt('Enter player number to give them to:') - 1\n//           ];\n//       }\n//     } else {\n//       targetPlayer = game.players\n//         .filter(function (otherPlayer) {\n//           return otherPlayer.id != player.id;\n//         })\n//         .sort(function (a, b) {\n//           return (\n//             b.hand.length +\n//             b.faceUp.length +\n//             b.faceDown.length -\n//             (a.hand.length + a.faceUp.length + a.faceDown.length)\n//           );\n//         })[0];\n//     }\n//\n//     game.turn +=\n//       targetPlayer.id +\n//       game.players.length * (targetPlayer.id < player.id) -\n//       player.id -\n//       1;\n//   },\n// },\n\nexport const getRules = (\n  cards: string[] = ['*1', '*2'],\n  value: number = 16,\n  weight: number = 45\n) => [\n  new Check(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => value)\n  ),\n\n  new PickedUp(\n    new Effect((pickedUp: Deck, game: Shithead) => {\n      pickedUp\n        .peek()\n        .filter((card: Card) => cards.includes(card.getId()))\n        .forEach((card) => game.burnt.push(pickedUp.remove(card)));\n    })\n  ),\n\n  // TODO: handle this\n  // new Played(\n  //     new Criterion((played: Deck, player: Player, game: Shithead) => {\n  //         const jokers = cardRegistryInstance.filter((card: Card) => ['*1', '*2'].includes(card.getId()));\n  //\n  //         return jokers.some((joker) => played.includes(joker));\n  //     }),\n  //     new Effect((played: Deck, player: Player, game: Shithead) => {\n  //\n  //     }),\n  // ),\n\n  // new ValidateMove(\n  //   new Effect(\n  //     (played: Deck) => !cards.includes((played.top() || noCard).getId())\n  //   )\n  // ),\n\n  new Weight(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => weight)\n  ),\n];\n\nexport default getRules;\n", "import { Check, value } from '../Rules/Check';\nimport Card from '../Card';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Weight from '../Rules/Weight';\nimport { noCard } from '../playingCards';\n\nexport const previousValue = (cards: string[]) =>\n  new Check(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect((card: Card, pile: Deck) =>\n      value((pile.has(card) ? pile.before(card) : pile.top()) || noCard, pile)\n    )\n  );\n\nexport const getRules = (\n  cards: string[] = ['4C', '4D', '4H', '4S'],\n  weight: number = 30\n) => [\n  previousValue(cards),\n\n  new Weight(\n    new Criterion((card) => cards.includes(card.getId())),\n    new Effect(() => weight)\n  ),\n];\n\nexport default getRules;\n", "import Criterion from '@civ-clone/core-rule/Criterion';\nimport Deck from '../Deck';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Played from '../Rules/Played';\nimport Player from '../Player/Player';\nimport Shithead from '../Shithead';\nimport Weight from '../Rules/Weight';\nimport { previousValue } from './seeThrough';\n\nexport const getRules = (\n  cards: string[] = ['8C', '8D', '8H', '8S'],\n  weight: number = 20\n) => [\n  previousValue(cards),\n\n  new Played(\n    new Criterion((played: Deck) =>\n      played.peek().some((card) => cards.includes(card.getId()))\n    ),\n    new Effect((played: Deck, player: Player, game: Shithead) =>\n      game.advanceTurn(\n        played.peek().filter((card) => cards.includes(card.getId())).length\n      )\n    )\n  ),\n\n  new Weight(\n    new Criterion((card) => cards.includes(card.getId())),\n    new Effect(() => weight)\n  ),\n];\n\nexport default getRules;\n", "import Beats from '../Rules/Beats';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Check } from '../Rules/Check';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Card from '../Card';\nimport Weight from '../Rules/Weight';\n\nexport const getRules = (\n  cards: string[] = ['2C', '2D', '2H', '2S'],\n  weight: number = 15\n) => [\n  new Beats(new Effect((played) => cards.includes(played.getId()))),\n\n  new Check(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => 0)\n  ),\n\n  new Weight(\n    new Criterion((card: Card) => cards.includes(card.getId())),\n    new Effect(() => weight)\n  ),\n];\n\nexport default getRules;\n", "import AI from './Player/AI';\nimport Human from './Player/Human';\nimport Shithead from './Shithead';\nimport acesHigh from './RuleSets/acesHigh';\nimport burnTheDeck from './RuleSets/burnTheDeck';\nimport core from './RuleSets/core';\nimport fourOfAKind from './RuleSets/fourOfAKind';\nimport giftDiscard from './RuleSets/giftDiscard';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport missAGo from './RuleSets/missAGo';\nimport reset from './RuleSets/reset';\nimport seeThrough from './RuleSets/seeThrough';\nimport Player from './Player/Player';\nimport Played from './Rules/Played';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Card from './Card';\nimport TurnStart from './Rules/TurnStart';\nimport Deck from './Deck';\n\nruleRegistryInstance.register(\n  ...core(),\n  ...fourOfAKind(),\n  ...reset(),\n  ...missAGo(),\n  ...acesHigh(),\n  ...burnTheDeck(),\n  ...giftDiscard(),\n  ...seeThrough()\n);\n\nlet game: Shithead;\n\nconst burnt = document.querySelector('.burnt') as Element,\n  discard = document.querySelector('.discard') as Element,\n  deck = document.querySelector('.deck') as Element,\n  players = document.querySelector('.players') as Element;\n\nconst newGame = () => {\n  game = new Shithead({\n    players: [\n      new Human({\n        id: 1,\n        name: 'Player',\n      }),\n      new AI({\n        id: 2,\n        name: 'CPU',\n      }),\n    ],\n  });\n\n  game.start();\n\n  game.play().then((player: Player) => {\n    if (player instanceof Human) {\n      const fireworks = document.createElement('div');\n\n      fireworks.classList.add('pyro');\n      fireworks.setAttribute('data-player-name', player.getName());\n\n      const fireworksBefore = document.createElement('div'),\n        fireworksAfter = document.createElement('div');\n\n      fireworksBefore.classList.add('before');\n      fireworksAfter.classList.add('after');\n\n      fireworks.append(fireworksBefore, fireworksAfter);\n\n      fireworks.addEventListener('click', () => fireworks.remove());\n\n      document.body.append(fireworks);\n\n      return;\n    }\n\n    // TODO: flip the table, throw the cards, etc\n    alert('Computer won! \uD83D\uDE29');\n  });\n};\n\nconst newGameButton = document.querySelector('.new-game');\n\nif (newGameButton === null) {\n  throw new TypeError(`Invalid HTML.`);\n}\n\nnewGameButton.addEventListener('click', () => newGame());\n\n[discard, burnt].forEach((pile) => {\n  pile.addEventListener('click', () => {\n    const overlay = document.createElement('div'),\n      preview = pile.cloneNode(true) as Element;\n\n    overlay.classList.add('overlay');\n\n    preview.classList.remove('pile');\n    preview.classList.add('hand');\n\n    overlay.append(preview);\n\n    overlay.addEventListener('click', () => overlay.remove());\n\n    document.body.append(overlay);\n  });\n});\n\nruleRegistryInstance.register(\n  new Played(\n    new Effect((played: Deck, player: Player) => updateDisplay(player))\n  ),\n  new TurnStart(new Effect((player: Player) => updateDisplay(player)))\n);\n\nconst updateDisplay = (turnPlayer: Player) => {\n  window.requestAnimationFrame(() => {\n    const emptyElement = (element: Element) => {\n        while (element.hasChildNodes()) {\n          (element.firstChild as Element).remove();\n        }\n      },\n      createCard = (card: Card, additionalClasses: string[] = []) => {\n        const cardElement = document.createElement('div');\n\n        cardElement.classList.add('card');\n\n        if (additionalClasses.length > 0) {\n          cardElement.classList.add(...additionalClasses);\n        }\n\n        if (!additionalClasses.includes('face-down')) {\n          cardElement.setAttribute('data-card-id', card.getId());\n        }\n\n        return cardElement;\n      },\n      addCards = (\n        cards: Card[],\n        target: Element,\n        additionalClasses: string[] = []\n      ) => {\n        cards.forEach((card) =>\n          target.append(createCard(card, additionalClasses))\n        );\n      };\n\n    (\n      [\n        [burnt, game.burnt.peek()],\n        [discard, game.discard.peek()],\n        [deck, game.deck.peek(), ['face-down']],\n      ] as [Element, Card[], string[] | undefined][]\n    ).forEach(([target, cards, additionalClasses = []]) => {\n      emptyElement(target);\n      addCards(cards, target, additionalClasses);\n    });\n\n    emptyElement(players);\n\n    game.players.forEach((player) => {\n      const faceDown = player.faceDown.peek(),\n        faceUp = player.faceUp.peek(),\n        createPile = () => {\n          const pile = document.createElement('div');\n\n          pile.classList.add('down', 'pile');\n\n          return pile;\n        },\n        piles = [createPile(), createPile(), createPile()],\n        playerContainer = document.createElement('div'),\n        hand = document.createElement('div');\n\n      piles.forEach((pile, i) => {\n        if (faceDown[i] ?? false) {\n          pile.append(createCard(faceDown[i], ['face-down']));\n        }\n\n        if (faceUp[i] ?? false) {\n          pile.append(createCard(faceUp[i]));\n        }\n      });\n\n      hand.classList.add('hand');\n\n      const additionalClasses: string[] = [];\n\n      if (player !== turnPlayer || !(player instanceof Human)) {\n        additionalClasses.push('face-down');\n      }\n\n      if (player.hand.length > 0) {\n        player.hand\n          .peek()\n          .forEach((card) => hand.append(createCard(card, additionalClasses)));\n      }\n\n      playerContainer.classList.add('player');\n      playerContainer.setAttribute('data-player-name', player.getName());\n      playerContainer.setAttribute('data-player-id', player.getId().toString());\n\n      playerContainer.append(...piles, hand);\n\n      players.append(playerContainer);\n    });\n  });\n};\n\nif ('ontouchstart' in document) {\n  (document.querySelector('html') as Element).classList.add('has-touch');\n}\n"],
  "mappings": "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",
  "names": []
}
